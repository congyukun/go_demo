// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeServer 使用 Wire 构建 Gin Engine
func InitializeServer(configPath string) (*gin.Engine, error) {
	config, err := ProvideConfig(configPath)
	if err != nil {
		return nil, err
	}
	appInit, err := ProvideAppInit(config)
	if err != nil {
		return nil, err
	}
	db, err := ProvideDB(config)
	if err != nil {
		return nil, err
	}
	userRepository := ProvideRepository(db)
	services := ProvideServices(userRepository)
	handlers := ProvideHandlers(services)
	router := ProvideRouter(handlers)
	engine := ProvideGinEngine(appInit, router)
	return engine, nil
}

// InitializeApp 初始化完整应用依赖（可选，用于测试或其他场景）
func InitializeApp(configPath string) (*AppDependencies, error) {
	config, err := ProvideConfig(configPath)
	if err != nil {
		return nil, err
	}
	db, err := ProvideDB(config)
	if err != nil {
		return nil, err
	}
	cacheInterface, err := ProvideCache(config)
	if err != nil {
		return nil, err
	}
	userRepository := ProvideRepository(db)
	services := ProvideServices(userRepository)
	handlers := ProvideHandlers(services)
	appDependencies := ProvideAppDependencies(config, db, cacheInterface, userRepository, services, handlers)
	return appDependencies, nil
}

// wire.go:

// 基础设施集合
var infrastructureSet = wire.NewSet(
	ProvideConfig,
	ProvideAppInit,
	ProvideDB,
	ProvideCache,
)

// 业务逻辑集合
var businessSet = wire.NewSet(
	ProvideRepository,
	ProvideServices,
	ProvideHandlers,
	ProvideAppDependencies,
)

// 应用层集合
var applicationSet = wire.NewSet(
	ProvideRouter,
	ProvideGinEngine,
)

openapi: 3.0.3
info:
  title: Go Demo API
  description: Go Demo 项目的 RESTful API 文档
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080/api/v1
    description: 开发环境

paths:
  /health:
    get:
      summary: 健康检查
      description: 检查服务是否正常运行
      responses:
        '200':
          description: 服务正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  time:
                    type: string
                    format: date-time

  /auth/login:
    post:
      summary: 用户登录
      description: 用户通过用户名和密码登录系统
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: 参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 认证失败
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      summary: 用户注册
      description: 注册新用户账号
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: 注册成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: 参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 用户已存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: 用户登出
      description: 用户登出系统
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: 未认证
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      summary: 获取用户列表
      description: 分页获取用户列表
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: 每页数量
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '401':
          description: 未认证
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      summary: 获取用户详情
      description: 根据用户ID获取用户详细信息
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        '401':
          description: 未认证
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 用户不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: 更新用户信息
      description: 更新指定用户的信息
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        '400':
          description: 参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未认证
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 用户不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: 删除用户
      description: 删除指定用户（软删除）
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: 未认证
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 用户不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: 用户名
          example: "admin"
        password:
          type: string
          description: 密码
          example: "123456"

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
        - name
      properties:
        username:
          type: string
          description: 用户名
          minLength: 3
          maxLength: 20
          example: "newuser"
        password:
          type: string
          description: 密码
          minLength: 6
          example: "123456"
        email:
          type: string
          format: email
          description: 邮箱
          example: "user@example.com"
        name:
          type: string
          description: 姓名
          minLength: 1
          maxLength: 50
          example: "张三"

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: 邮箱
          example: "newemail@example.com"
        name:
          type: string
          description: 姓名
          minLength: 1
          maxLength: 50
          example: "李四"
        status:
          type: integer
          description: 状态 (0:禁用, 1:正常)
          enum: [0, 1]
          example: 1

    User:
      type: object
      properties:
        id:
          type: integer
          description: 用户ID
          example: 1
        username:
          type: string
          description: 用户名
          example: "admin"
        email:
          type: string
          description: 邮箱
          example: "admin@example.com"
        name:
          type: string
          description: 姓名
          example: "管理员"
        status:
          type: integer
          description: 状态
          example: 1

    LoginResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "登录成功"
        data:
          type: object
          properties:
            token:
              type: string
              description: 访问令牌
              example: "token_abc123..."
            expires_at:
              type: string
              format: date-time
              description: 令牌过期时间
            user:
              $ref: '#/components/schemas/User'
        request_id:
          type: string
          example: "req-123456"

    UserResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "操作成功"
        data:
          $ref: '#/components/schemas/User'
        request_id:
          type: string
          example: "req-123456"

    UserDetailResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "获取用户详情成功"
        data:
          $ref: '#/components/schemas/User'
        request_id:
          type: string
          example: "req-123456"

    UsersListResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "获取用户列表成功"
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            pagination:
              type: object
              properties:
                page:
                  type: integer
                  example: 1
                page_size:
                  type: integer
                  example: 10
                total:
                  type: integer
                  example: 100
        request_id:
          type: string
          example: "req-123456"

    SuccessResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "操作成功"
        request_id:
          type: string
          example: "req-123456"

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "错误信息"
        request_id:
          type: string
          example: "req-123456"